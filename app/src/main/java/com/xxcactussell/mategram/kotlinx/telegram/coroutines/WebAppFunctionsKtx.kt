//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package com.xxcactussell.mategram.kotlinx.telegram.coroutines

import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import com.xxcactussell.mategram.kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.CustomRequestResult
import org.drinkless.tdlib.TdApi.FoundUsers
import org.drinkless.tdlib.TdApi.FoundWebApp
import org.drinkless.tdlib.TdApi.HttpUrl
import org.drinkless.tdlib.TdApi.InputMessageReplyTo
import org.drinkless.tdlib.TdApi.MainWebApp
import org.drinkless.tdlib.TdApi.Outline
import org.drinkless.tdlib.TdApi.WebAppInfo
import org.drinkless.tdlib.TdApi.WebAppOpenParameters

/**
 * Suspend function, which informs TDLib that a previously opened Web App was closed.
 *
 * @param webAppLaunchId Identifier of Web App launch, received from openWebApp.
 */
suspend fun TelegramFlow.closeWebApp(webAppLaunchId: Long) =
    this.sendFunctionLaunch(TdApi.CloseWebApp(webAppLaunchId))

/**
 * Suspend function, which returns the most grossing Web App bots.
 *
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of bots to be returned; up to 100.
 *
 * @return [FoundUsers] Represents a list of found users.
 */
suspend fun TelegramFlow.getGrossingWebAppBots(offset: String?, limit: Int): FoundUsers =
    this.sendFunctionAsync(TdApi.GetGrossingWebAppBots(offset, limit))

/**
 * Suspend function, which returns information needed to open the main Web App of a bot.
 *
 * @param chatId Identifier of the chat in which the Web App is opened; pass 0 if none.  
 * @param botUserId Identifier of the target bot. If the bot is restricted for the current user,
 * then show an error instead of calling the method.  
 * @param startParameter Start parameter from internalLinkTypeMainWebApp.  
 * @param parameters Parameters to use to open the Web App.
 *
 * @return [MainWebApp] Contains information about the main Web App of a bot.
 */
suspend fun TelegramFlow.getMainWebApp(
  chatId: Long,
  botUserId: Long,
  startParameter: String?,
  parameters: WebAppOpenParameters?
): MainWebApp = this.sendFunctionAsync(TdApi.GetMainWebApp(chatId, botUserId, startParameter,
    parameters))

/**
 * Suspend function, which returns an HTTPS URL of a Web App to open after a link of the type
 * internalLinkTypeWebApp is clicked.
 *
 * @param chatId Identifier of the chat in which the link was clicked; pass 0 if none.  
 * @param botUserId Identifier of the target bot.  
 * @param webAppShortName Short name of the Web App.  
 * @param startParameter Start parameter from internalLinkTypeWebApp.  
 * @param allowWriteAccess Pass true if the current user allowed the bot to send them messages.  
 * @param parameters Parameters to use to open the Web App.
 *
 * @return [HttpUrl] Contains an HTTP URL.
 */
suspend fun TelegramFlow.getWebAppLinkUrl(
  chatId: Long,
  botUserId: Long,
  webAppShortName: String?,
  startParameter: String?,
  allowWriteAccess: Boolean,
  parameters: WebAppOpenParameters?
): HttpUrl = this.sendFunctionAsync(TdApi.GetWebAppLinkUrl(chatId, botUserId, webAppShortName,
    startParameter, allowWriteAccess, parameters))

/**
 * Suspend function, which returns a default placeholder for Web Apps of a bot. This is an offline
 * method. Returns a 404 error if the placeholder isn't known.
 *
 * @param botUserId Identifier of the target bot.
 *
 * @return [Outline] Represents outline of an image.
 */
suspend fun TelegramFlow.getWebAppPlaceholder(botUserId: Long): Outline =
    this.sendFunctionAsync(TdApi.GetWebAppPlaceholder(botUserId))

/**
 * Suspend function, which returns an HTTPS URL of a Web App to open from the side menu, a
 * keyboardButtonTypeWebApp button, or an inlineQueryResultsButtonTypeWebApp button.
 *
 * @param botUserId Identifier of the target bot. If the bot is restricted for the current user,
 * then show an error instead of calling the method.  
 * @param url The URL from a keyboardButtonTypeWebApp button, inlineQueryResultsButtonTypeWebApp
 * button, or an empty string when the bot is opened from the side menu.  
 * @param parameters Parameters to use to open the Web App.
 *
 * @return [HttpUrl] Contains an HTTP URL.
 */
suspend fun TelegramFlow.getWebAppUrl(
  botUserId: Long,
  url: String?,
  parameters: WebAppOpenParameters?
): HttpUrl = this.sendFunctionAsync(TdApi.GetWebAppUrl(botUserId, url, parameters))

/**
 * Suspend function, which informs TDLib that a Web App is being opened from the attachment menu, a
 * botMenuButton button, an internalLinkTypeAttachmentMenuBot link, or an
 * inlineKeyboardButtonTypeWebApp button. For each bot, a confirmation alert about data sent to the bot
 * must be shown once.
 *
 * @param chatId Identifier of the chat in which the Web App is opened. The Web App can't be opened
 * in secret chats.  
 * @param botUserId Identifier of the bot, providing the Web App. If the bot is restricted for the
 * current user, then show an error instead of calling the method.  
 * @param url The URL from an inlineKeyboardButtonTypeWebApp button, a botMenuButton button, an
 * internalLinkTypeAttachmentMenuBot link, or an empty string otherwise.  
 * @param messageThreadId If not 0, the message thread identifier in which the message will be sent.
 *  
 * @param replyTo Information about the message or story to be replied in the message sent by the
 * Web App; pass null if none.  
 * @param parameters Parameters to use to open the Web App.
 *
 * @return [WebAppInfo] Contains information about a Web App.
 */
suspend fun TelegramFlow.openWebApp(
  chatId: Long,
  botUserId: Long,
  url: String?,
  messageThreadId: Long,
  replyTo: InputMessageReplyTo?,
  parameters: WebAppOpenParameters?
): WebAppInfo = this.sendFunctionAsync(TdApi.OpenWebApp(chatId, botUserId, url, messageThreadId,
    replyTo, parameters))

/**
 * Suspend function, which returns information about a Web App by its short name. Returns a 404
 * error if the Web App is not found.
 *
 * @param botUserId Identifier of the target bot.  
 * @param webAppShortName Short name of the Web App.
 *
 * @return [FoundWebApp] Contains information about a Web App found by its short name.
 */
suspend fun TelegramFlow.searchWebApp(botUserId: Long, webAppShortName: String?): FoundWebApp =
    this.sendFunctionAsync(TdApi.SearchWebApp(botUserId, webAppShortName))

/**
 * Suspend function, which sends a custom request from a Web App.
 *
 * @param botUserId Identifier of the bot.  
 * @param method The method name.  
 * @param parameters JSON-serialized method parameters.
 *
 * @return [CustomRequestResult] Contains the result of a custom request.
 */
suspend fun TelegramFlow.sendWebAppCustomRequest(
  botUserId: Long,
  method: String?,
  parameters: String?
): CustomRequestResult = this.sendFunctionAsync(TdApi.SendWebAppCustomRequest(botUserId, method,
    parameters))

/**
 * Suspend function, which sends data received from a keyboardButtonTypeWebApp Web App to a bot.
 *
 * @param botUserId Identifier of the target bot.  
 * @param buttonText Text of the keyboardButtonTypeWebApp button, which opened the Web App.  
 * @param data The data.
 */
suspend fun TelegramFlow.sendWebAppData(
  botUserId: Long,
  buttonText: String?,
  data: String?
) = this.sendFunctionLaunch(TdApi.SendWebAppData(botUserId, buttonText, data))
