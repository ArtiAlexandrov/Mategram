//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package com.xxcactussell.mategram.kotlinx.telegram.coroutines

import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import com.xxcactussell.mategram.kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.FormattedText
import org.drinkless.tdlib.TdApi.GiftUpgradePreview
import org.drinkless.tdlib.TdApi.Gifts
import org.drinkless.tdlib.TdApi.HttpUrl
import org.drinkless.tdlib.TdApi.MessageSender
import org.drinkless.tdlib.TdApi.PremiumGiftCodeInfo
import org.drinkless.tdlib.TdApi.ReceivedGift
import org.drinkless.tdlib.TdApi.ReceivedGifts
import org.drinkless.tdlib.TdApi.UpgradeGiftResult
import org.drinkless.tdlib.TdApi.UpgradedGift

/**
 * Suspend function, which applies a Telegram Premium gift code.
 *
 * @param code The code to apply.
 */
suspend fun TelegramFlow.applyPremiumGiftCode(code: String?) =
    this.sendFunctionLaunch(TdApi.ApplyPremiumGiftCode(code))

/**
 * Suspend function, which return information about a Telegram Premium gift code.
 *
 * @param code The code to check.
 *
 * @return [PremiumGiftCodeInfo] Contains information about a Telegram Premium gift code.
 */
suspend fun TelegramFlow.checkPremiumGiftCode(code: String?): PremiumGiftCodeInfo =
    this.sendFunctionAsync(TdApi.CheckPremiumGiftCode(code))

/**
 * Suspend function, which returns gifts that can be sent to other users and channel chats.
 *
 * @return [Gifts] Contains a list of gifts that can be sent to another user or channel chat.
 */
suspend fun TelegramFlow.getAvailableGifts(): Gifts =
    this.sendFunctionAsync(TdApi.GetAvailableGifts())

/**
 * Suspend function, which returns examples of possible upgraded gifts for a regular gift.
 *
 * @param giftId Identifier of the gift.
 *
 * @return [GiftUpgradePreview] Contains examples of possible upgraded gifts for the given regular
 * gift.
 */
suspend fun TelegramFlow.getGiftUpgradePreview(giftId: Long): GiftUpgradePreview =
    this.sendFunctionAsync(TdApi.GetGiftUpgradePreview(giftId))

/**
 * Suspend function, which returns information about a received gift.
 *
 * @param receivedGiftId Identifier of the gift.
 *
 * @return [ReceivedGift] Represents a gift received by a user or a chat.
 */
suspend fun TelegramFlow.getReceivedGift(receivedGiftId: String?): ReceivedGift =
    this.sendFunctionAsync(TdApi.GetReceivedGift(receivedGiftId))

/**
 * Suspend function, which returns gifts received by the given user or chat.
 *
 * @param ownerId Identifier of the gift receiver.  
 * @param excludeUnsaved Pass true to exclude gifts that aren't saved to the chat's profile page.
 * Always true for gifts received by other users and channel chats without canPostMessages
 * administrator right.  
 * @param excludeSaved Pass true to exclude gifts that are saved to the chat's profile page. Always
 * false for gifts received by other users and channel chats without canPostMessages administrator
 * right.  
 * @param excludeUnlimited Pass true to exclude gifts that can be purchased unlimited number of
 * times.  
 * @param excludeLimited Pass true to exclude gifts that can be purchased limited number of times.  
 * @param excludeUpgraded Pass true to exclude upgraded gifts.  
 * @param sortByPrice Pass true to sort results by gift price instead of send date.  
 * @param offset Offset of the first entry to return as received from the previous request; use
 * empty string to get the first chunk of results.  
 * @param limit The maximum number of gifts to be returned; must be positive and can't be greater
 * than 100. For optimal performance, the number of returned objects is chosen by TDLib and can be
 * smaller than the specified limit.
 *
 * @return [ReceivedGifts] Represents a list of gifts received by a user or a chat.
 */
suspend fun TelegramFlow.getReceivedGifts(
  ownerId: MessageSender?,
  excludeUnsaved: Boolean,
  excludeSaved: Boolean,
  excludeUnlimited: Boolean,
  excludeLimited: Boolean,
  excludeUpgraded: Boolean,
  sortByPrice: Boolean,
  offset: String?,
  limit: Int
): ReceivedGifts = this.sendFunctionAsync(TdApi.GetReceivedGifts(ownerId, excludeUnsaved,
    excludeSaved, excludeUnlimited, excludeLimited, excludeUpgraded, sortByPrice, offset, limit))

/**
 * Suspend function, which returns information about an upgraded gift by its name.
 *
 * @param name Unique name of the upgraded gift.
 *
 * @return [UpgradedGift] Describes an upgraded gift that can be transferred to another owner or
 * transferred to the TON blockchain as an NFT.
 */
suspend fun TelegramFlow.getUpgradedGift(name: String?): UpgradedGift =
    this.sendFunctionAsync(TdApi.GetUpgradedGift(name))

/**
 * Suspend function, which returns a URL for upgraded gift withdrawal in the TON blockchain as an
 * NFT; requires owner privileges for gifts owned by a chat.
 *
 * @param receivedGiftId Identifier of the gift.  
 * @param password The 2-step verification password of the current user.
 *
 * @return [HttpUrl] Contains an HTTP URL.
 */
suspend fun TelegramFlow.getUpgradedGiftWithdrawalUrl(receivedGiftId: String?, password: String?):
    HttpUrl = this.sendFunctionAsync(TdApi.GetUpgradedGiftWithdrawalUrl(receivedGiftId, password))

/**
 * Suspend function, which sells a gift for Telegram Stars.
 *
 * @param receivedGiftId Identifier of the gift.
 */
suspend fun TelegramFlow.sellGift(receivedGiftId: String?) =
    this.sendFunctionLaunch(TdApi.SellGift(receivedGiftId))

/**
 * Suspend function, which sends a gift to another user or channel chat. May return an error with a
 * message &quot;STARGIFT_USAGE_LIMITED&quot; if the gift was sold out.
 *
 * @param giftId Identifier of the gift to send.  
 * @param ownerId Identifier of the user or the channel chat that will receive the gift.  
 * @param text Text to show along with the gift; 0-getOption(&quot;gift_text_length_max&quot;)
 * characters. Only Bold, Italic, Underline, Strikethrough, Spoiler, and CustomEmoji entities are
 * allowed. Must be empty if the receiver enabled paid messages.  
 * @param isPrivate Pass true to show gift text and sender only to the gift receiver; otherwise,
 * everyone will be able to see them.  
 * @param payForUpgrade Pass true to additionally pay for the gift upgrade and allow the receiver to
 * upgrade it for free.
 */
suspend fun TelegramFlow.sendGift(
  giftId: Long,
  ownerId: MessageSender?,
  text: FormattedText?,
  isPrivate: Boolean,
  payForUpgrade: Boolean
) = this.sendFunctionLaunch(TdApi.SendGift(giftId, ownerId, text, isPrivate, payForUpgrade))

/**
 * Suspend function, which changes the list of pinned gifts on the current user's or the channel's
 * profile page; requires canPostMessages administrator right in the channel chat.
 *
 * @param ownerId Identifier of the user or the channel chat that received the gifts.  
 * @param receivedGiftIds New list of pinned gifts. All gifts must be upgraded and saved on the
 * profile page first. There can be up to getOption(&quot;pinned_gift_count_max&quot;) pinned gifts.
 */
suspend fun TelegramFlow.setPinnedGifts(ownerId: MessageSender?, receivedGiftIds: Array<String>?) =
    this.sendFunctionLaunch(TdApi.SetPinnedGifts(ownerId, receivedGiftIds))

/**
 * Suspend function, which toggles whether a gift is shown on the current user's or the channel's
 * profile page; requires canPostMessages administrator right in the channel chat.
 *
 * @param receivedGiftId Identifier of the gift.  
 * @param isSaved Pass true to display the gift on the user's or the channel's profile page; pass
 * false to remove it from the profile page.
 */
suspend fun TelegramFlow.toggleGiftIsSaved(receivedGiftId: String?, isSaved: Boolean) =
    this.sendFunctionLaunch(TdApi.ToggleGiftIsSaved(receivedGiftId, isSaved))

/**
 * Suspend function, which sends an upgraded gift to another user or a channel chat.
 *
 * @param receivedGiftId Identifier of the gift.  
 * @param newOwnerId Identifier of the user or the channel chat that will receive the gift.  
 * @param starCount The amount of Telegram Stars required to pay for the transfer.
 */
suspend fun TelegramFlow.transferGift(
  receivedGiftId: String?,
  newOwnerId: MessageSender?,
  starCount: Long
) = this.sendFunctionLaunch(TdApi.TransferGift(receivedGiftId, newOwnerId, starCount))

/**
 * Suspend function, which upgrades a regular gift.
 *
 * @param receivedGiftId Identifier of the gift.  
 * @param keepOriginalDetails Pass true to keep the original gift text, sender and receiver in the
 * upgraded gift.  
 * @param starCount The amount of Telegram Stars required to pay for the upgrade. It the gift has
 * prepaidUpgradeStarCount &gt; 0, then pass 0, otherwise, pass gift.upgradeStarCount.
 *
 * @return [UpgradeGiftResult] Contains result of gift upgrading.
 */
suspend fun TelegramFlow.upgradeGift(
  receivedGiftId: String?,
  keepOriginalDetails: Boolean,
  starCount: Long
): UpgradeGiftResult = this.sendFunctionAsync(TdApi.UpgradeGift(receivedGiftId, keepOriginalDetails,
    starCount))
