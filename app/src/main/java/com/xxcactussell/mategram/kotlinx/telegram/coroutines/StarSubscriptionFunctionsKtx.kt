//
// NOTE: THIS FILE IS AUTO-GENERATED by the "TdApiKtxGenerator".kt
// See: https://github.com/tdlibx/td-ktx-generator/
//
package com.xxcactussell.mategram.kotlinx.telegram.coroutines

import kotlin.Boolean
import kotlin.String
import com.xxcactussell.mategram.kotlinx.telegram.core.TelegramFlow
import org.drinkless.tdlib.TdApi
import org.drinkless.tdlib.TdApi.StarSubscriptions

/**
 * Suspend function, which cancels or re-enables Telegram Star subscription.
 *
 * @param subscriptionId Identifier of the subscription to change.  
 * @param isCanceled New value of isCanceled.
 */
suspend fun TelegramFlow.editStarSubscription(subscriptionId: String?, isCanceled: Boolean) =
    this.sendFunctionLaunch(TdApi.EditStarSubscription(subscriptionId, isCanceled))

/**
 * Suspend function, which returns the list of Telegram Star subscriptions for the current user.
 *
 * @param onlyExpiring Pass true to receive only expiring subscriptions for which there are no
 * enough Telegram Stars to extend.  
 * @param offset Offset of the first subscription to return as received from the previous request;
 * use empty string to get the first chunk of results.
 *
 * @return [StarSubscriptions] Represents a list of Telegram Star subscriptions.
 */
suspend fun TelegramFlow.getStarSubscriptions(onlyExpiring: Boolean, offset: String?):
    StarSubscriptions = this.sendFunctionAsync(TdApi.GetStarSubscriptions(onlyExpiring, offset))

/**
 * Suspend function, which reuses an active Telegram Star subscription to a channel chat and joins
 * the chat again.
 *
 * @param subscriptionId Identifier of the subscription.
 */
suspend fun TelegramFlow.reuseStarSubscription(subscriptionId: String?) =
    this.sendFunctionLaunch(TdApi.ReuseStarSubscription(subscriptionId))
